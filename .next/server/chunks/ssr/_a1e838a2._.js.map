{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/colombian-holidays.ts"],"sourcesContent":["/**\n * Representa una fecha.\n */\nexport interface Date {\n  year: number;\n  month: number; // 1-12\n  day: number;\n}\n\n/**\n * Obtiene de forma asíncrona una lista de festivos colombianos para un año dado.\n *\n * @param year El año para el cual obtener los festivos.\n * @returns Una promesa que resuelve a un array de objetos Date representando los festivos.\n */\nexport async function getColombianHolidays(year: number): Promise<Date[]> {\n  // TODO: Implementar esto llamando a una API externa o usando una biblioteca confiable.\n  // Ejemplo de estructura placeholder:\n  // const response = await fetch(`https://api.example.com/holidays/co/${year}`);\n  // if (!response.ok) {\n  //   throw new Error('Fallo al obtener los festivos');\n  // }\n  // const holidays = await response.json();\n  // return holidays.map(holiday => ({ year: year, month: ..., day: ... }));\n\n   console.warn(`Obteniendo festivos para ${year} - Usando datos de ejemplo. Implementar llamada API.`);\n\n   // Datos de ejemplo SOLO para desarrollo/pruebas\n   if (year === 2024) {\n        return [\n            { year: 2024, month: 1, day: 1 }, { year: 2024, month: 1, day: 8 }, // Año Nuevo, Reyes Magos\n            { year: 2024, month: 3, day: 25 }, { year: 2024, month: 3, day: 28 }, // San José, Jueves Santo\n            { year: 2024, month: 3, day: 29 }, { year: 2024, month: 5, day: 1 }, // Viernes Santo, Día del Trabajo\n            { year: 2024, month: 5, day: 13 }, { year: 2024, month: 6, day: 3 }, // Ascensión del Señor, Corpus Christi\n            { year: 2024, month: 6, day: 10 }, { year: 2024, month: 7, day: 1 }, // Sagrado Corazón, San Pedro y San Pablo\n            { year: 2024, month: 7, day: 20 }, { year: 2024, month: 8, day: 7 }, // Independencia, Batalla de Boyacá\n            { year: 2024, month: 8, day: 19 }, { year: 2024, month: 10, day: 14 }, // Asunción de la Virgen, Día de la Raza\n            { year: 2024, month: 11, day: 4 }, { year: 2024, month: 11, day: 11 }, // Todos los Santos, Independencia de Cartagena\n            { year: 2024, month: 12, day: 8 }, { year: 2024, month: 12, day: 25 } // Inmaculada Concepción, Navidad\n        ];\n   }\n   if (year === 2025) {\n     return [\n       { year: 2025, month: 1, day: 1 }, { year: 2025, month: 1, day: 6 }, // Año Nuevo, Reyes Magos\n       { year: 2025, month: 3, day: 24 }, { year: 2025, month: 4, day: 17 }, // San José, Jueves Santo\n       { year: 2025, month: 4, day: 18 }, { year: 2025, month: 5, day: 1 }, // Viernes Santo, Día del Trabajo\n       { year: 2025, month: 6, day: 2 }, { year: 2025, month: 6, day: 23 }, // Ascensión del Señor, Corpus Christi\n       { year: 2025, month: 6, day: 30 }, { year: 2025, month: 7, day: 20 }, // Sagrado Corazón, San Pedro y San Pablo (Nota: 20 Julio cae Domingo, no se traslada)\n       { year: 2025, month: 8, day: 7 }, { year: 2025, month: 8, day: 18 }, // Batalla de Boyacá, Asunción de la Virgen\n       { year: 2025, month: 10, day: 13 }, { year: 2025, month: 11, day: 3 }, // Día de la Raza, Todos los Santos\n       { year: 2025, month: 11, day: 17 }, { year: 2025, month: 12, day: 8 }, // Independencia de Cartagena, Inmaculada Concepción\n       { year: 2025, month: 12, day: 25 } // Navidad\n     ];\n   }\n    if (year === 2023) {\n        return [\n            { year: 2023, month: 1, day: 1 }, { year: 2023, month: 1, day: 9 },\n            { year: 2023, month: 3, day: 20 }, { year: 2023, month: 4, day: 6 },\n            { year: 2023, month: 4, day: 7 }, { year: 2023, month: 5, day: 1 },\n            { year: 2023, month: 5, day: 22 }, { year: 2023, month: 6, day: 12 },\n            { year: 2023, month: 6, day: 19 }, { year: 2023, month: 7, day: 3 },\n            { year: 2023, month: 7, day: 20 }, { year: 2023, month: 8, day: 7 },\n            { year: 2023, month: 8, day: 21 }, { year: 2023, month: 10, day: 16 },\n            { year: 2023, month: 11, day: 6 }, { year: 2023, month: 11, day: 13 },\n            { year: 2023, month: 12, day: 8 }, { year: 2023, month: 12, day: 25 }\n        ];\n    }\n\n\n  // Retorna array vacío si no hay datos de ejemplo o la API falla en el futuro\n  return [];\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/calculate-workday.ts"],"sourcesContent":["\n'use server';\n\nimport {\n    parse, format, addHours, addDays,\n    isBefore, isAfter, isEqual, isSameDay,\n    startOfDay, endOfDay, getDay, getHours, getMinutes,\n    differenceInSeconds, setHours, setMinutes, setSeconds, setMilliseconds,\n    isValid, getYear, parseISO\n} from 'date-fns';\nimport type { z } from 'zod';\n// Use the type directly if defined elsewhere, or redefine if needed\n// Assuming WorkdayFormValues is defined like this:\nexport interface WorkdayFormValues {\n  startDate: Date;\n  startTime: string; // HH:mm\n  endTime: string; // HH:mm\n  endsNextDay: boolean;\n  includeBreak: boolean;\n  breakStartTime?: string; // HH:mm, optional\n  breakEndTime?: string; // HH:mm, optional\n}\n// Define the return types for this specific function\nexport interface CalculationResults {\n  horasDetalladas: {\n    Ordinaria_Diurna_Base: number;\n    Recargo_Noct_Base: number;\n    Recargo_Dom_Diurno_Base: number;\n    Recargo_Dom_Noct_Base: number;\n    HED: number;\n    HEN: number;\n    HEDD_F: number;\n    HEND_F: number;\n  };\n  pagoDetallado: {\n    [key in keyof CalculationResults['horasDetalladas']]: number;\n  };\n  pagoTotalRecargosExtras: number;\n  pagoTotalConSalario: number; // Remains for consistency if needed, though payroll action handles final pay\n  duracionTotalTrabajadaHoras: number;\n}\nexport interface CalculationError {\n  error: string;\n}\n\nimport { getColombianHolidays } from '@/services/colombian-holidays';\n\n\n// --- Constantes y Parámetros ---\nconst HORAS_JORNADA_BASE = 7.66; // Horas base antes de considerar extras\nconst HORA_NOCTURNA_INICIO = 21; // 9 PM (inclusive)\nconst HORA_NOCTURNA_FIN = 6;   // 6 AM (exclusive)\n\n// Valores por hora (pesos colombianos)\n// ESTE ES EL OBJETO QUE DEBES ACTUALIZAR SI LOS VALORES CAMBIAN:\nconst VALORES = {\n    \"Recargo_Noct_Base\": 2166,          // Recargo Nocturno (dentro de las 7.66h base, laboral)\n    \"HED\": 7736.41,                        // Hora Extra Diurna (después de 7.66h,laboral, hasta las 9 pm )\n    \"HEN\": 10830.98,                        // Hora Extra Nocturna (después de 7.66h, laboral)\n    \"Recargo_Dom_Diurno_Base\": 4642,    // Recargo Dominical/Festivo Diurno (dentro de 7.66h)\n    \"Recargo_Dom_Noct_Base\": 6808,    // Recargo Dominical/Festivo Nocturno (dentro de 7.66h)\n    \"HEDD_F\": 12378.26,                     // Hora Extra Dominical/Festiva Diurna (después de 7.66h)\n    \"HEND_F\": 15472.83,                     // Hora Extra Dominical/Festiva Nocturna (después de 7.66h)\n    \"Ordinaria_Diurna_Base\": 0          // Horas base diurnas laborales (sin recargo adicional sobre el salario)\n};\n// SALARIO_BASE_QUINCENAL is now handled by the calling payroll calculation action\n// const SALARIO_BASE_QUINCENAL = 711750;\n\n// Cache para festivos\nlet festivosCache: { [year: number]: Set<string> } = {};\n\nasync function getFestivosSet(year: number): Promise<Set<string>> {\n    if (festivosCache[year]) {\n        return festivosCache[year];\n    }\n    try {\n        const holidays = await getColombianHolidays(year);\n        // Ensure dates from service are handled correctly (assuming they are {year, month, day})\n        const festivosSet = new Set(holidays.map(h => {\n             // Construct date carefully, month is 0-indexed in JS Date constructor\n             const dateStr = format(new Date(h.year, h.month - 1, h.day), 'yyyy-MM-dd');\n             return dateStr;\n        }));\n        festivosCache[year] = festivosSet;\n        return festivosSet;\n    } catch (error) {\n        console.error(\"Error al obtener festivos:\", error);\n        return new Set();\n    }\n}\n\n\nasync function esFestivo(fecha: Date): Promise<boolean> {\n    // Ensure 'fecha' is a Date object\n     if (!(fecha instanceof Date) || !isValid(fecha)) {\n        console.error(\"Invalid date passed to esFestivo:\", fecha);\n        return false; // Or throw an error\n     }\n    const year = getYear(fecha);\n    const festivos = await getFestivosSet(year);\n    const fechaStr = format(fecha, 'yyyy-MM-dd');\n    return festivos.has(fechaStr);\n}\n\nfunction esDominical(fecha: Date): boolean {\n    // Ensure 'fecha' is a Date object\n     if (!(fecha instanceof Date) || !isValid(fecha)) {\n         console.error(\"Invalid date passed to esDominical:\", fecha);\n         return false; // Or throw an error\n     }\n    return getDay(fecha) === 0; // 0 = Domingo\n}\n\n// Helper to parse HH:mm time string into hours and minutes\nfunction parseTimeString(timeStr: string | undefined): { hours: number; minutes: number } | null {\n    if (!timeStr || !/^\\d{2}:\\d{2}$/.test(timeStr)) return null;\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    // Basic validation for hours/minutes ranges\n    if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) return null;\n    return { hours, minutes };\n}\n\n\n// --- Lógica Principal de Cálculo (Single Workday) ---\nexport async function calculateWorkday(\n    values: WorkdayFormValues // Use the defined type\n): Promise<CalculationResults | CalculationError> {\n\n    const { startDate, startTime, endTime, endsNextDay, includeBreak, breakStartTime, breakEndTime } = values;\n\n    // --- Parseo y Validación Inicial ---\n    // Ensure startDate is a Date object\n    const baseDate = (startDate instanceof Date && isValid(startDate)) ? startDate : parseISO(startDate as unknown as string); // Attempt parse if string\n     if (!isValid(baseDate)) {\n         return { error: \"Fecha de inicio inválida.\" };\n     }\n\n    const inicioDtStr = `${format(baseDate, 'yyyy-MM-dd')} ${startTime}`;\n    const inicioDt = parse(inicioDtStr, 'yyyy-MM-dd HH:mm', new Date());\n\n    if (!isValid(inicioDt)) {\n        return { error: \"Fecha u hora de inicio inválida.\" };\n    }\n\n    let finDt: Date;\n    let finDateBase = endsNextDay ? addDays(baseDate, 1) : baseDate;\n    let finDtStr = `${format(finDateBase, 'yyyy-MM-dd')} ${endTime}`;\n\n    finDt = parse(finDtStr, 'yyyy-MM-dd HH:mm', new Date());\n\n\n    if (!isValid(finDt)) {\n        return { error: \"Fecha u hora de fin inválida.\" };\n    }\n\n    if (isBefore(finDt, inicioDt) || isEqual(finDt, inicioDt)) {\n        return { error: \"La hora de fin debe ser posterior a la hora de inicio.\" };\n    }\n\n    // --- Validar y parsear horas de descanso si aplica ---\n    let parsedBreakStart: { hours: number; minutes: number } | null = null;\n    let parsedBreakEnd: { hours: number; minutes: number } | null = null;\n    let breakDurationSeconds = 0;\n\n    if (includeBreak) {\n        parsedBreakStart = parseTimeString(breakStartTime);\n        parsedBreakEnd = parseTimeString(breakEndTime);\n\n        if (!parsedBreakStart || !parsedBreakEnd) {\n             return { error: \"Formato de hora de descanso inválido (HH:mm).\" };\n        }\n        if (parsedBreakEnd.hours < parsedBreakStart.hours || (parsedBreakEnd.hours === parsedBreakStart.hours && parsedBreakEnd.minutes <= parsedBreakStart.minutes)) {\n             return { error: \"La hora de fin del descanso debe ser posterior a la hora de inicio.\" };\n        }\n\n         const breakStartTotalMinutes = parsedBreakStart.hours * 60 + parsedBreakStart.minutes;\n         const breakEndTotalMinutes = parsedBreakEnd.hours * 60 + parsedBreakEnd.minutes;\n         breakDurationSeconds = (breakEndTotalMinutes - breakStartTotalMinutes) * 60;\n\n         // Ensure break duration is not longer than the shift itself (simple check)\n         const shiftDurationSeconds = differenceInSeconds(finDt, inicioDt);\n         if (breakDurationSeconds >= shiftDurationSeconds) {\n            // This might be valid in some cases (e.g., split shift), but often indicates an error.\n            // Let's allow it for now but maybe add a warning later.\n            console.warn(\"Break duration is equal to or longer than the shift duration.\");\n            // breakDurationSeconds = shiftDurationSeconds; // Cap break duration?\n         }\n\n    }\n\n\n    // --- Obtener Festivos para los años involucrados (already handled by payroll action caller) ---\n    // Assuming the cache is populated before this function is called in loop\n\n\n    // --- Inicializar contadores ---\n    let horasClasificadas: CalculationResults['horasDetalladas'] = {\n        \"Ordinaria_Diurna_Base\": 0.0,\n        \"Recargo_Noct_Base\": 0.0,\n        \"Recargo_Dom_Diurno_Base\": 0.0,\n        \"Recargo_Dom_Noct_Base\": 0.0,\n        \"HED\": 0.0,\n        \"HEN\": 0.0,\n        \"HEDD_F\": 0.0,\n        \"HEND_F\": 0.0\n    };\n    let duracionTotalTrabajadaSegundos = 0; // This will accumulate actual worked time\n    let segundosTrabajadosAcumulados = 0; // To track the extra hours threshold\n\n    // --- Iterar minuto a minuto sobre el tiempo BRUTO (antes de descontar descanso) ---\n    let cursorDt = inicioDt;\n\n    while (isBefore(cursorDt, finDt)) {\n        const cursorPlusOneMin = addHours(cursorDt, 1 / 60); // Siguiente minuto\n        // Ensure we don't go past finDt if the last interval is less than a minute\n        const currentSegmentEnd = isBefore(cursorPlusOneMin, finDt) ? cursorPlusOneMin : finDt;\n        const segmentDurationSeconds = differenceInSeconds(currentSegmentEnd, cursorDt);\n\n        // Punto medio del intervalo para evaluar condiciones\n        // Using the start of the minute interval (cursorDt) is sufficient and simpler\n        const puntoEvaluacion = cursorDt; // Evaluate conditions based on the start of the minute\n        const horaEval = getHours(puntoEvaluacion);\n        const minutoEval = getMinutes(puntoEvaluacion);\n\n        // Verificar si es Descanso usando los tiempos parseados si includeBreak es true\n        let esDescanso = false;\n        if (includeBreak && parsedBreakStart && parsedBreakEnd) {\n             const horaActualTotalMinutos = horaEval * 60 + minutoEval;\n             const inicioDescansoTotalMinutos = parsedBreakStart.hours * 60 + parsedBreakStart.minutes;\n             const finDescansoTotalMinutos = parsedBreakEnd.hours * 60 + parsedBreakEnd.minutes;\n             esDescanso = horaActualTotalMinutos >= inicioDescansoTotalMinutos && horaActualTotalMinutos < finDescansoTotalMinutos;\n        }\n\n        if (!esDescanso) {\n            // Solo clasificar si NO es descanso\n            duracionTotalTrabajadaSegundos += segmentDurationSeconds; // Accumulate actual worked seconds\n            segundosTrabajadosAcumulados += segmentDurationSeconds; // Track seconds worked for threshold check\n            const horasTrabajadasAcumuladas = segundosTrabajadosAcumulados / 3600.0;\n            const esHoraExtra = horasTrabajadasAcumuladas > HORAS_JORNADA_BASE;\n            const esFestivoDominical = await esFestivo(puntoEvaluacion) || esDominical(puntoEvaluacion);\n            const esNocturna = horaEval >= HORA_NOCTURNA_INICIO || horaEval < HORA_NOCTURNA_FIN;\n\n            // --- Clasificación del minuto/segment ---\n            let categoria: keyof typeof horasClasificadas | null = null;\n            const durationToAdd = segmentDurationSeconds / 3600.0; // Duration in hours for this segment\n\n            if (esHoraExtra) {\n                if (esFestivoDominical) {\n                    categoria = esNocturna ? \"HEND_F\" : \"HEDD_F\";\n                } else {\n                    categoria = esNocturna ? \"HEN\" : \"HED\";\n                }\n            } else { // Dentro de la jornada base\n                if (esFestivoDominical) {\n                    categoria = esNocturna ? \"Recargo_Dom_Noct_Base\" : \"Recargo_Dom_Diurno_Base\";\n                } else { // Día laboral\n                    if (esNocturna) {\n                        categoria = \"Recargo_Noct_Base\";\n                    } else {\n                         // Horas base diurnas, no tienen recargo, solo contar las horas.\n                         horasClasificadas[\"Ordinaria_Diurna_Base\"] += durationToAdd;\n                         // No assign categoria here to avoid multiplying by VALORES[\"Ordinaria_Diurna_Base\"] (which is 0)\n                    }\n                }\n            }\n\n            // Sumar la duración (en horas) a la categoría correspondiente\n            if (categoria && categoria !== \"Ordinaria_Diurna_Base\") {\n                horasClasificadas[categoria] += durationToAdd;\n            }\n        }\n\n        cursorDt = currentSegmentEnd; // Avanzar al final del segmento actual\n    }\n\n     // --- Calcular Pagos ---\n     let pagoTotalRecargosExtras = 0;\n     const pagoDetallado: CalculationResults['pagoDetallado'] = {\n          \"Ordinaria_Diurna_Base\": 0, // Explicitly 0 payment for base hours\n          \"Recargo_Noct_Base\": 0,\n          \"Recargo_Dom_Diurno_Base\": 0,\n          \"Recargo_Dom_Noct_Base\": 0,\n          \"HED\": 0,\n          \"HEN\": 0,\n          \"HEDD_F\": 0,\n          \"HEND_F\": 0\n     };\n\n     for (const key in horasClasificadas) {\n         const catKey = key as keyof typeof horasClasificadas;\n         const horas = horasClasificadas[catKey];\n         if (horas > 0 && catKey !== \"Ordinaria_Diurna_Base\") { // Don't calculate payment for base diurna here\n              const valorHora = VALORES[catKey as keyof typeof VALORES] ?? 0;\n              const pagoCategoria = horas * valorHora;\n              pagoTotalRecargosExtras += pagoCategoria;\n              pagoDetallado[catKey] = pagoCategoria;\n         }\n     }\n\n    // The pagoTotalConSalario calculation is removed as it's handled by the payroll action\n\n    // --- Retornar Resultados ---\n    return {\n        horasDetalladas: horasClasificadas,\n        pagoDetallado: pagoDetallado,\n        pagoTotalRecargosExtras: pagoTotalRecargosExtras,\n        pagoTotalConSalario: pagoTotalRecargosExtras, // Temporary: Keep structure, but value is just extras now\n        duracionTotalTrabajadaHoras: duracionTotalTrabajadaSegundos / 3600.0,\n    };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/calculate-payroll.ts"],"sourcesContent":["\n'use server';\n\nimport type {\n  PayrollCalculationInput,\n  PayrollCalculationResult,\n  PayrollError,\n  Turno,\n  OtraDeduccion,\n  OtroIngreso\n} from '@/types/payroll';\nimport type { WorkdayFormValues } from '@/components/workday-form'; // For single workday calculation\nimport type { CalculationResults, CalculationError } from '@/types'; // Single workday results\nimport { calculateWorkday } from './calculate-workday'; // Import the single workday calculator\nimport { getColombianHolidays } from '@/services/colombian-holidays'; // Needed for holiday checks\nimport { format, getYear, isSameDay } from 'date-fns';\n\nconst SALARIO_MINIMO_MENSUAL_LEGAL_VIGENTE = 1300000; // Example 2024. Adjust as needed.\nconst AUXILIO_TRANSPORTE_MENSUAL = 162000; // Example 2024. Adjust as needed.\nconst TOPE_SALARIO_AUXILIO_TRANSPORTE = SALARIO_MINIMO_MENSUAL_LEGAL_VIGENTE * 2; // Up to 2x SMLMV\nconst PORCENTAJE_SALUD = 0.04; // 4%\nconst PORCENTAJE_PENSION = 0.04; // 4%\n\n// --- Helper Function to Initialize Aggregated Results ---\nfunction initializeAggregatedResults(): PayrollCalculationResult['horasDetalladasAgregadas'] {\n    return {\n        Ordinaria_Diurna_Base: 0,\n        Recargo_Noct_Base: 0,\n        Recargo_Dom_Diurno_Base: 0,\n        Recargo_Dom_Noct_Base: 0,\n        HED: 0,\n        HEN: 0,\n        HEDD_F: 0,\n        HEND_F: 0,\n        totalHorasTrabajadas: 0, // Initialize total hours\n    };\n}\n\nfunction initializeAggregatedPagos(): PayrollCalculationResult['pagoDetalladoAgregado'] {\n    return {\n        Ordinaria_Diurna_Base: 0,\n        Recargo_Noct_Base: 0,\n        Recargo_Dom_Diurno_Base: 0,\n        Recargo_Dom_Noct_Base: 0,\n        HED: 0,\n        HEN: 0,\n        HEDD_F: 0,\n        HEND_F: 0,\n        totalHorasTrabajadas: 0, // Although pago is 0, include for structure consistency\n    };\n}\n\n// --- Main Payroll Calculation Action ---\nexport async function calculateBiWeeklyPayroll(\n  input: PayrollCalculationInput\n): Promise<PayrollCalculationResult | PayrollError> {\n  const {\n    id_colaborador,\n    fecha_inicio,\n    fecha_fin,\n    turnos,\n    salarioBaseQuincenal,\n    aplicarAuxilioTransporte, // User's choice\n    otrasDeducciones,\n    otrosIngresos\n  } = input;\n\n  if (!turnos || turnos.length === 0) {\n    // Handle case with no shifts - might still have base salary, deductions, etc.\n    console.warn(`No shifts found for ${id_colaborador} between ${format(fecha_inicio, 'yyyy-MM-dd')} and ${format(fecha_fin, 'yyyy-MM-dd')}. Calculating based on salary only.`);\n    // Proceed with calculations based only on salary and fixed values if applicable\n  }\n\n  // --- Preload Holidays for the relevant years ---\n  const startYear = getYear(fecha_inicio);\n  const endYear = getYear(fecha_fin);\n  await getColombianHolidays(startYear);\n  if (startYear !== endYear) {\n    await getColombianHolidays(endYear);\n  }\n\n  // --- Initialize Aggregation Variables ---\n  let horasAgregadas = initializeAggregatedResults();\n  let pagosAgregados = initializeAggregatedPagos();\n  let totalExtrasRecargosQuincenal = 0;\n  let totalHorasTrabajadasQuincenal = 0;\n\n  // --- Phase 2: Iterate Through Each Shift and Calculate ---\n  for (const turno of turnos) {\n    // Adapt Turno to WorkdayFormValues format expected by calculateWorkday\n    const workdayInput: WorkdayFormValues = {\n      startDate: turno.fecha,\n      startTime: turno.hora_entrada,\n      endTime: turno.hora_salida,\n      endsNextDay: turno.termina_dia_siguiente,\n      includeBreak: turno.info_descanso.incluye_descanso,\n      breakStartTime: turno.info_descanso.hora_inicio_descanso,\n      breakEndTime: turno.info_descanso.hora_fin_descanso,\n    };\n\n    const workdayResult: CalculationResults | CalculationError = await calculateWorkday(workdayInput);\n\n    if ('error' in workdayResult) {\n      console.error(`Error calculating workday for shift ${turno.id} on ${format(turno.fecha, 'yyyy-MM-dd')}: ${workdayResult.error}`);\n      // Decide how to handle errors: skip shift, return error for whole payroll, etc.\n      // For now, let's return an error for the whole payroll calculation\n      return { error: `Error en cálculo de turno ${format(turno.fecha, 'yyyy-MM-dd')}: ${workdayResult.error}` };\n    }\n\n    // Aggregate results\n    Object.keys(horasAgregadas).forEach(key => {\n        if (key !== 'totalHorasTrabajadas' && key in workdayResult.horasDetalladas) {\n             horasAgregadas[key as keyof typeof horasAgregadas] += workdayResult.horasDetalladas[key as keyof CalculationResults['horasDetalladas']];\n        }\n    });\n     Object.keys(pagosAgregados).forEach(key => {\n         if (key !== 'totalHorasTrabajadas' && key in workdayResult.pagoDetallado) {\n             pagosAgregados[key as keyof typeof pagosAgregados] += workdayResult.pagoDetallado[key as keyof CalculationResults['pagoDetallado']];\n         }\n     });\n\n    totalExtrasRecargosQuincenal += workdayResult.pagoTotalRecargosExtras;\n    totalHorasTrabajadasQuincenal += workdayResult.duracionTotalTrabajadaHoras;\n    horasAgregadas.totalHorasTrabajadas = totalHorasTrabajadasQuincenal; // Update total hours worked\n  }\n\n   // --- Calculate Devengado (Earnings) ---\n   const subtotalDevengadoQuincenal = salarioBaseQuincenal + totalExtrasRecargosQuincenal;\n\n   // --- Calculate Auxilio de Transporte Eligibility and Value ---\n   // Estimate monthly salary based on bi-weekly base for eligibility check\n   const salarioMensualEstimado = salarioBaseQuincenal * 2; // Approximation\n   const esElegibleAuxilioTransporte = salarioMensualEstimado <= TOPE_SALARIO_AUXILIO_TRANSPORTE;\n   const auxilioTransporteAplicado = (aplicarAuxilioTransporte && esElegibleAuxilioTransporte)\n       ? AUXILIO_TRANSPORTE_MENSUAL / 2 // Bi-weekly portion\n       : 0;\n\n\n   // --- Calculate Total Other Income ---\n   const totalOtrosIngresos = otrosIngresos.reduce((sum, ingreso) => sum + ingreso.valor, 0);\n\n\n   // --- Calculate Total Gross Earnings ---\n   const totalDevengadoBrutoQuincenal = subtotalDevengadoQuincenal + auxilioTransporteAplicado + totalOtrosIngresos;\n\n\n   // --- Calculate Social Security Contributions (IBC and Deductions) ---\n   // Base calculation: Total earnings excluding non-salary items (like auxilio transporte)\n   let ibc_Quincenal_Calculado = subtotalDevengadoQuincenal + totalOtrosIngresos; // Start with salary + extras/recargos + other *income*\n   // Check minimum wage rule: IBC cannot be less than 1 SMLMV (pro-rated for bi-weekly)\n   const salarioMinimoQuincenal = SALARIO_MINIMO_MENSUAL_LEGAL_VIGENTE / 2;\n   const ibc_Final_Quincenal = Math.max(ibc_Quincenal_Calculado, salarioMinimoQuincenal);\n\n   const deduccionSaludQuincenal = ibc_Final_Quincenal * PORCENTAJE_SALUD;\n   const deduccionPensionQuincenal = ibc_Final_Quincenal * PORCENTAJE_PENSION;\n\n   // --- Calculate Total Other Deductions ---\n   const totalOtrasDeducciones = otrasDeducciones.reduce((sum, deduccion) => sum + deduccion.valor, 0);\n\n   // --- Calculate Net Pay ---\n   const subtotalNetoParcialQuincenal = totalDevengadoBrutoQuincenal - deduccionSaludQuincenal - deduccionPensionQuincenal;\n   const netoAPagarQuincenal = subtotalNetoParcialQuincenal - totalOtrasDeducciones;\n\n\n  // --- Construct Final Result Object ---\n  const finalResult: PayrollCalculationResult = {\n    id_colaborador,\n    fecha_inicio,\n    fecha_fin,\n    horasDetalladasAgregadas: horasAgregadas,\n    pagoDetalladoAgregado: pagosAgregados,\n    totalExtrasRecargosQuincenal,\n    salarioBaseQuincenal,\n    subtotalDevengadoQuincenal,\n    esElegibleAuxilioTransporte,\n    auxilioTransporteAplicado,\n    totalOtrosIngresos,\n    totalDevengadoBrutoQuincenal,\n    ibc_Quincenal_Calculado,\n    ibc_Final_Quincenal,\n    deduccionSaludQuincenal,\n    deduccionPensionQuincenal,\n    totalOtrasDeducciones,\n    otrasDeduccionesDetalle: otrasDeducciones, // Include the details\n    subtotalNetoParcialQuincenal,\n    netoAPagarQuincenal,\n  };\n\n  return finalResult;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 806, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 820, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}