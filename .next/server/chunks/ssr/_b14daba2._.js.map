{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/colombian-holidays.ts"],"sourcesContent":["/**\n * Representa una fecha.\n */\nexport interface Date {\n  year: number;\n  month: number; // 1-12\n  day: number;\n}\n\n/**\n * Obtiene de forma asíncrona una lista de festivos colombianos para un año dado.\n *\n * @param year El año para el cual obtener los festivos.\n * @returns Una promesa que resuelve a un array de objetos Date representando los festivos.\n */\nexport async function getColombianHolidays(year: number): Promise<Date[]> {\n  // TODO: Implementar esto llamando a una API externa o usando una biblioteca confiable.\n  // Ejemplo de estructura placeholder:\n  // const response = await fetch(`https://api.example.com/holidays/co/${year}`);\n  // if (!response.ok) {\n  //   throw new Error('Fallo al obtener los festivos');\n  // }\n  // const holidays = await response.json();\n  // return holidays.map(holiday => ({ year: year, month: ..., day: ... }));\n\n   console.warn(`Obteniendo festivos para ${year} - Usando datos de ejemplo. Implementar llamada API.`);\n\n   // Datos de ejemplo SOLO para desarrollo/pruebas\n   if (year === 2024) {\n        return [\n            { year: 2024, month: 1, day: 1 }, { year: 2024, month: 1, day: 8 }, // Año Nuevo, Reyes Magos\n            { year: 2024, month: 3, day: 25 }, { year: 2024, month: 3, day: 28 }, // San José, Jueves Santo\n            { year: 2024, month: 3, day: 29 }, { year: 2024, month: 5, day: 1 }, // Viernes Santo, Día del Trabajo\n            { year: 2024, month: 5, day: 13 }, { year: 2024, month: 6, day: 3 }, // Ascensión del Señor, Corpus Christi\n            { year: 2024, month: 6, day: 10 }, { year: 2024, month: 7, day: 1 }, // Sagrado Corazón, San Pedro y San Pablo\n            { year: 2024, month: 7, day: 20 }, { year: 2024, month: 8, day: 7 }, // Independencia, Batalla de Boyacá\n            { year: 2024, month: 8, day: 19 }, { year: 2024, month: 10, day: 14 }, // Asunción de la Virgen, Día de la Raza\n            { year: 2024, month: 11, day: 4 }, { year: 2024, month: 11, day: 11 }, // Todos los Santos, Independencia de Cartagena\n            { year: 2024, month: 12, day: 8 }, { year: 2024, month: 12, day: 25 } // Inmaculada Concepción, Navidad\n        ];\n   }\n   if (year === 2025) {\n     return [\n       { year: 2025, month: 1, day: 1 }, { year: 2025, month: 1, day: 6 }, // Año Nuevo, Reyes Magos\n       { year: 2025, month: 3, day: 24 }, { year: 2025, month: 4, day: 17 }, // San José, Jueves Santo\n       { year: 2025, month: 4, day: 18 }, { year: 2025, month: 5, day: 1 }, // Viernes Santo, Día del Trabajo\n       { year: 2025, month: 6, day: 2 }, { year: 2025, month: 6, day: 23 }, // Ascensión del Señor, Corpus Christi\n       { year: 2025, month: 6, day: 30 }, { year: 2025, month: 7, day: 20 }, // Sagrado Corazón, San Pedro y San Pablo (Nota: 20 Julio cae Domingo, no se traslada)\n       { year: 2025, month: 8, day: 7 }, { year: 2025, month: 8, day: 18 }, // Batalla de Boyacá, Asunción de la Virgen\n       { year: 2025, month: 10, day: 13 }, { year: 2025, month: 11, day: 3 }, // Día de la Raza, Todos los Santos\n       { year: 2025, month: 11, day: 17 }, { year: 2025, month: 12, day: 8 }, // Independencia de Cartagena, Inmaculada Concepción\n       { year: 2025, month: 12, day: 25 } // Navidad\n     ];\n   }\n    if (year === 2023) {\n        return [\n            { year: 2023, month: 1, day: 1 }, { year: 2023, month: 1, day: 9 },\n            { year: 2023, month: 3, day: 20 }, { year: 2023, month: 4, day: 6 },\n            { year: 2023, month: 4, day: 7 }, { year: 2023, month: 5, day: 1 },\n            { year: 2023, month: 5, day: 22 }, { year: 2023, month: 6, day: 12 },\n            { year: 2023, month: 6, day: 19 }, { year: 2023, month: 7, day: 3 },\n            { year: 2023, month: 7, day: 20 }, { year: 2023, month: 8, day: 7 },\n            { year: 2023, month: 8, day: 21 }, { year: 2023, month: 10, day: 16 },\n            { year: 2023, month: 11, day: 6 }, { year: 2023, month: 11, day: 13 },\n            { year: 2023, month: 12, day: 8 }, { year: 2023, month: 12, day: 25 }\n        ];\n    }\n\n\n  // Retorna array vacío si no hay datos de ejemplo o la API falla en el futuro\n  return [];\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/config/payroll-values.ts"],"sourcesContent":["// src/config/payroll-values.ts\n\n/**\n * @fileOverview Configuration file for payroll values.\n * This file exports constants used in payroll calculations, specifically the hourly rates for different types of work hours.\n * It is separated from 'use server' files to allow importing constants into client components without violating 'use server' rules.\n */\n\n// Valores por hora (pesos colombianos)\n// ESTE ES EL OBJETO QUE DEBES ACTUALIZAR SI LOS VALORES CAMBIAN:\nexport const VALORES = {\n    \"Recargo_Noct_Base\": 2166,          // Recargo Nocturno (dentro de las 7.66h base, laboral)\n    \"HED\": 7736.41,                        // Hora Extra Diurna (después de 7.66h, laboral, hasta las 9 pm)\n    \"HEN\": 10830.98,                       // Hora Extra Nocturna (después de 7.66h, laboral)\n    \"Recargo_Dom_Diurno_Base\": 4642,    // Recargo Dominical/Festivo Diurno (dentro de 7.66h)\n    \"Recargo_Dom_Noct_Base\": 6808,    // Recargo Dominical/Festivo Nocturno (dentro de 7.66h)\n    \"HEDD_F\": 12378.26,                    // Hora Extra Dominical/Festiva Diurna (después de 7.66h)\n    \"HEND_F\": 15472.83,                    // Hora Extra Dominical/Festiva Nocturna (después de 7.66h)\n    \"Ordinaria_Diurna_Base\": 0          // Horas base diurnas laborales (sin recargo adicional sobre el salario)\n};\n"],"names":[],"mappings":"AAAA,+BAA+B;AAE/B;;;;CAIC,GAED,uCAAuC;AACvC,iEAAiE;;;;AAC1D,MAAM,UAAU;IACnB,qBAAqB;IACrB,OAAO;IACP,OAAO;IACP,2BAA2B;IAC3B,yBAAyB;IACzB,UAAU;IACV,UAAU;IACV,yBAAyB,EAAW,wEAAwE;AAChH","debugId":null}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/calculate-workday.ts"],"sourcesContent":["\n'use server';\n\nimport {\n    parse, format, addHours, addDays,\n    isBefore, isAfter, isEqual, isSameDay,\n    startOfDay, endOfDay, getDay, getHours, getMinutes,\n    differenceInSeconds, setHours, setMinutes, setSeconds, setMilliseconds,\n    isValid, getYear\n} from 'date-fns';\nimport type { z } from 'zod';\nimport type { WorkdayFormValues } from '@/components/workday-form'; // Adjust path if needed\nimport type { CalculationResults, CalculationError } from '@/types';\nimport { getColombianHolidays } from '@/services/colombian-holidays';\nimport { VALORES } from '@/config/payroll-values'; // Import from new location\n\n\n// --- Constantes y Parámetros ---\nconst HORAS_JORNADA_BASE = 7.66; // Horas base antes de considerar extras\nconst HORA_NOCTURNA_INICIO = 21; // 9 PM (inclusive)\nconst HORA_NOCTURNA_FIN = 6;   // 6 AM (exclusive)\n\n// Valores por hora (pesos colombianos)\n// ESTE ES EL OBJETO QUE DEBES ACTUALIZAR SI LOS VALORES CAMBIAN:\n// const VALORES = { ... } // Now imported from @/config/payroll-values\n\n// Cache para festivos\nlet festivosCache: { [year: number]: Set<string> } = {};\n\nasync function getFestivosSet(year: number): Promise<Set<string>> {\n    if (festivosCache[year]) {\n        return festivosCache[year];\n    }\n    try {\n        const holidays = await getColombianHolidays(year);\n        if (!Array.isArray(holidays)) {\n             console.error(`[getFestivosSet] Error: getColombianHolidays(${year}) no devolvió un array.`);\n             throw new Error(`Formato de respuesta inválido para festivos de ${year}.`);\n        }\n        const festivosSet = new Set(holidays.map(h => {\n             if (!h || typeof h.year !== 'number' || typeof h.month !== 'number' || typeof h.day !== 'number') {\n                 console.error(`[getFestivosSet] Error: Estructura de objeto festivo inválida para ${year}:`, h);\n                 return '';\n             }\n             try {\n                const dateToFormat = new Date(h.year, h.month - 1, h.day);\n                if (!isValid(dateToFormat) || getYear(dateToFormat) !== h.year) {\n                    console.error(`[getFestivosSet] Error: Componentes de fecha inválidos para festivo en ${year}:`, h);\n                    return '';\n                }\n                return format(dateToFormat, 'yyyy-MM-dd');\n             } catch (formatError) {\n                 console.error(`[getFestivosSet] Error formateando fecha festiva para ${year}:`, h, formatError);\n                 return '';\n             }\n        }));\n        const validFestivosSet = new Set(Array.from(festivosSet).filter(dateStr => dateStr !== ''));\n        festivosCache[year] = validFestivosSet;\n        return validFestivosSet;\n    } catch (error) {\n        console.error(`[getFestivosSet] Error al obtener o procesar festivos para ${year}:`, error);\n        const userMessage = `Error consultando festivos para ${year}. Verifique la fuente de datos.`;\n        throw new Error(userMessage + ` Detalle: ${error instanceof Error ? error.message : String(error)}`);\n    }\n}\n\n\nasync function esFestivo(fecha: Date): Promise<boolean> {\n    const year = getYear(fecha);\n    try {\n        const festivos = await getFestivosSet(year);\n        const fechaStr = format(fecha, 'yyyy-MM-dd');\n        return festivos.has(fechaStr);\n    } catch (error) {\n        console.error(`[esFestivo] Error verificando si ${format(fecha, 'yyyy-MM-dd')} es festivo:`, error);\n        throw new Error(`Error al verificar festivo: ${error instanceof Error ? error.message : String(error)}`);\n    }\n}\n\nfunction esDominical(fecha: Date): boolean {\n    return getDay(fecha) === 0; // 0 = Domingo\n}\n\nfunction parseTimeString(timeStr: string | undefined): { hours: number; minutes: number } | null {\n    if (!timeStr || !/^\\d{2}:\\d{2}$/.test(timeStr)) return null;\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    return { hours, minutes };\n}\n\n\n// --- Lógica Principal de Cálculo ---\nexport async function calculateSingleWorkday(\n    values: WorkdayFormValues,\n    id: string\n): Promise<CalculationResults | CalculationError> {\n\n    try {\n        const { startDate, startTime, endTime, endsNextDay, includeBreak, breakStartTime, breakEndTime } = values;\n\n        // --- Parseo y Validación Inicial ---\n        if (!startDate || !isValid(startDate)) {\n            return { error: `ID ${id}: Fecha de inicio inválida.` };\n        }\n        const inicioDtStr = `${format(startDate, 'yyyy-MM-dd')} ${startTime}`;\n        const inicioDt = parse(inicioDtStr, 'yyyy-MM-dd HH:mm', new Date());\n\n        if (!isValid(inicioDt)) {\n            return { error: `ID ${id}: Fecha u hora de inicio inválida (${inicioDtStr}).` };\n        }\n\n        let finDtBase = startDate;\n        if (endsNextDay) {\n            finDtBase = addDays(startDate, 1);\n        }\n        const finDtStr = `${format(finDtBase, 'yyyy-MM-dd')} ${endTime}`;\n        const finDt = parse(finDtStr, 'yyyy-MM-dd HH:mm', new Date());\n\n\n        if (!isValid(finDt)) {\n            return { error: `ID ${id}: Fecha u hora de fin inválida (${finDtStr}).` };\n        }\n\n        if (isBefore(finDt, inicioDt) || isEqual(finDt, inicioDt)) {\n            return { error: `ID ${id}: La hora de fin debe ser posterior a la hora de inicio.` };\n        }\n\n        let parsedBreakStart: { hours: number; minutes: number } | null = null;\n        let parsedBreakEnd: { hours: number; minutes: number } | null = null;\n        let breakDurationSeconds = 0;\n\n        if (includeBreak) {\n            parsedBreakStart = parseTimeString(breakStartTime);\n            parsedBreakEnd = parseTimeString(breakEndTime);\n\n            if (!parsedBreakStart || !parsedBreakEnd) {\n                 return { error: `ID ${id}: Formato de hora de descanso inválido (HH:mm).` };\n            }\n\n             const breakStartTotalMinutes = parsedBreakStart.hours * 60 + parsedBreakStart.minutes;\n             const breakEndTotalMinutes = parsedBreakEnd.hours * 60 + parsedBreakEnd.minutes;\n             if (breakEndTotalMinutes > breakStartTotalMinutes) {\n                breakDurationSeconds = (breakEndTotalMinutes - breakStartTotalMinutes) * 60;\n             } else {\n                 console.warn(`ID ${id}: Hora fin descanso (${breakEndTime}) no posterior a inicio (${breakStartTime}), ignorando descanso.`);\n                 breakDurationSeconds = 0;\n             }\n        }\n\n        // --- Obtener Festivos ---\n        await getFestivosSet(getYear(inicioDt));\n        if (!isSameDay(inicioDt, finDt)) {\n            await getFestivosSet(getYear(finDt));\n        }\n\n        // --- Inicializar contadores ---\n        let horasClasificadas: CalculationResults['horasDetalladas'] = {\n            \"Ordinaria_Diurna_Base\": 0.0, \"Recargo_Noct_Base\": 0.0, \"Recargo_Dom_Diurno_Base\": 0.0,\n            \"Recargo_Dom_Noct_Base\": 0.0, \"HED\": 0.0, \"HEN\": 0.0, \"HEDD_F\": 0.0, \"HEND_F\": 0.0\n        };\n        let duracionTotalTrabajadaSegundos = 0;\n        let segundosTrabajadosAcumulados = 0;\n\n        // --- Iterar minuto a minuto ---\n        let cursorDt = inicioDt;\n        while (isBefore(cursorDt, finDt)) {\n            const cursorPlusOneMin = addHours(cursorDt, 1 / 60);\n            const puntoEvaluacion = addHours(cursorDt, 1 / 120);\n            const horaEval = getHours(puntoEvaluacion);\n            const minutoEval = getMinutes(puntoEvaluacion);\n\n            let esDescanso = false;\n            if (includeBreak && parsedBreakStart && parsedBreakEnd && breakDurationSeconds > 0) {\n                 const horaActualTotalMinutos = horaEval * 60 + minutoEval;\n                 const inicioDescansoTotalMinutos = parsedBreakStart.hours * 60 + parsedBreakStart.minutes;\n                 const finDescansoTotalMinutos = parsedBreakEnd.hours * 60 + parsedBreakEnd.minutes;\n                 esDescanso = horaActualTotalMinutos >= inicioDescansoTotalMinutos && horaActualTotalMinutos < finDescansoTotalMinutos;\n            }\n\n            if (!esDescanso) {\n                duracionTotalTrabajadaSegundos += 60;\n                segundosTrabajadosAcumulados += 60;\n                const horasTrabajadasAcumuladas = segundosTrabajadosAcumulados / 3600.0;\n                const esHoraExtra = horasTrabajadasAcumuladas > HORAS_JORNADA_BASE;\n\n                let esFestivoDominical: boolean;\n                try {\n                    esFestivoDominical = await esFestivo(puntoEvaluacion) || esDominical(puntoEvaluacion);\n                } catch (holidayError) {\n                     console.error(`ID ${id}: Error verificando festivo/dominical para ${format(puntoEvaluacion, 'yyyy-MM-dd')}:`, holidayError);\n                     // Decide how to handle: throw, return error, or default to false? Returning error is safer.\n                     return { error: `ID ${id}: Error al verificar si ${format(puntoEvaluacion, 'dd/MM')} es festivo/domingo. ${holidayError instanceof Error ? holidayError.message : ''}` };\n                }\n\n                const esNocturna = horaEval >= HORA_NOCTURNA_INICIO || horaEval < HORA_NOCTURNA_FIN;\n\n                let categoria: keyof typeof horasClasificadas | null = null;\n\n                if (esHoraExtra) {\n                    if (esFestivoDominical) categoria = esNocturna ? \"HEND_F\" : \"HEDD_F\";\n                    else categoria = esNocturna ? \"HEN\" : \"HED\";\n                } else {\n                    if (esFestivoDominical) categoria = esNocturna ? \"Recargo_Dom_Noct_Base\" : \"Recargo_Dom_Diurno_Base\";\n                    else if (esNocturna) categoria = \"Recargo_Noct_Base\";\n                    else horasClasificadas[\"Ordinaria_Diurna_Base\"] += 1 / 60;\n                }\n\n                if (categoria && categoria !== \"Ordinaria_Diurna_Base\") {\n                    horasClasificadas[categoria] += 1 / 60;\n                }\n            }\n            cursorDt = cursorPlusOneMin;\n        }\n\n         // --- Calcular Pagos ---\n         let pagoTotalRecargosExtras = 0;\n         const pagoDetallado: { [key: string]: number } = {};\n\n         for (const key in horasClasificadas) {\n             const horas = horasClasificadas[key as keyof typeof horasClasificadas];\n             const valorHora = VALORES[key as keyof typeof VALORES];\n\n             if (valorHora === undefined && key !== \"Ordinaria_Diurna_Base\") {\n                 console.error(`ID ${id}: No se encontró valor para la categoría '${key}' en VALORES.`);\n                 // Consider throwing an error for missing critical configuration\n                 return { error: `ID ${id}: Configuración de pagos incompleta. Falta valor para '${key}'.` };\n             }\n\n             if (horas > 0 && key !== \"Ordinaria_Diurna_Base\") {\n                 const pagoCategoria = horas * (valorHora ?? 0);\n                 pagoTotalRecargosExtras += pagoCategoria;\n                 pagoDetallado[key] = pagoCategoria;\n             } else {\n                 pagoDetallado[key] = 0; // Ensure all keys exist, base diurnal has 0 extra payment\n             }\n         }\n\n        return {\n            id: id,\n            inputData: { ...values, startDate }, // Ensure startDate is passed as Date\n            horasDetalladas: horasClasificadas,\n            pagoDetallado: pagoDetallado,\n            pagoTotalRecargosExtras: pagoTotalRecargosExtras,\n            pagoTotalConSalario: pagoTotalRecargosExtras, // Represents only extras for the day\n            duracionTotalTrabajadaHoras: duracionTotalTrabajadaSegundos / 3600.0,\n        };\n\n    } catch (error) {\n        console.error(`[calculateSingleWorkday: ID ${id}] Error inesperado:`, error);\n        // Provide a more generic but informative error message for unexpected issues\n        const errorMessage = `ID ${id}: Error inesperado en el servidor durante el cálculo. Detalles: ${error instanceof Error ? error.message : String(error)}`;\n        return { error: errorMessage };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 660, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}