"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/schedule/page",{

/***/ "(app-pages-browser)/./src/lib/time-utils.ts":
/*!*******************************!*\
  !*** ./src/lib/time-utils.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatTo12Hour: () => (/* binding */ formatTo12Hour),\n/* harmony export */   parseTimeToMinutes: () => (/* binding */ parseTimeToMinutes)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_format_parse_date_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=format,parse!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/parse.mjs\");\n/* harmony import */ var _barrel_optimize_names_format_parse_date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=format,parse!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns/locale */ \"(app-pages-browser)/./node_modules/date-fns/locale/es.mjs\");\n// src/lib/time-utils.ts\n\n // Import Spanish locale if needed for 'am/pm'\n/**\n * Formats a time string (HH:mm) into 12-hour format (h:mm a).\n * Handles invalid input gracefully.\n *\n * @param timeString - The time string in \"HH:mm\" format.\n * @returns The formatted time string (e.g., \"8:00 AM\") or the original string if invalid.\n */ function formatTo12Hour(timeString) {\n    if (!timeString || !/^\\d{2}:\\d{2}$/.test(timeString)) {\n        return timeString || ''; // Return original or empty string if invalid/undefined\n    }\n    try {\n        // Create a dummy date object with the time to use date-fns formatting\n        const dummyDate = (0,_barrel_optimize_names_format_parse_date_fns__WEBPACK_IMPORTED_MODULE_0__.parse)(timeString, 'HH:mm', new Date());\n        // Format using 'h:mm a' for 12-hour format with AM/PM\n        // Use locale 'es' if you want 'a. m.'/'p. m.' instead of AM/PM\n        return (0,_barrel_optimize_names_format_parse_date_fns__WEBPACK_IMPORTED_MODULE_1__.format)(dummyDate, 'h:mm a', {\n            locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_2__.es\n        });\n    } catch (error) {\n        console.error('Error formatting time string \"'.concat(timeString, '\":'), error);\n        return timeString; // Return original string on error\n    }\n}\n/**\n * Parses a time string (HH:MM) into total minutes from midnight.\n * @param timeStr - The time string in \"HH:mm\" format.\n * @returns The total minutes from midnight, or 0 if invalid.\n */ const parseTimeToMinutes = (timeStr)=>{\n    if (!timeStr || !/^\\d{2}:\\d{2}$/.test(timeStr)) return 0;\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    return hours * 60 + minutes;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvdGltZS11dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHdCQUF3QjtBQUUwQztBQUM3QixDQUFDLDhDQUE4QztBQUVwRjs7Ozs7O0NBTUMsR0FDTSxTQUFTSyxlQUFlQyxVQUE4QjtJQUMzRCxJQUFJLENBQUNBLGNBQWMsQ0FBQyxnQkFBZ0JDLElBQUksQ0FBQ0QsYUFBYTtRQUNwRCxPQUFPQSxjQUFjLElBQUksdURBQXVEO0lBQ2xGO0lBRUEsSUFBSTtRQUNGLHNFQUFzRTtRQUN0RSxNQUFNRSxZQUFZTCxtRkFBUUEsQ0FBQ0csWUFBWSxTQUFTLElBQUlHO1FBQ3BELHNEQUFzRDtRQUN0RCwrREFBK0Q7UUFDL0QsT0FBT1Isb0ZBQVNBLENBQUNPLFdBQVcsVUFBVTtZQUFFRSxRQUFRTiwrQ0FBRUE7UUFBQztJQUNyRCxFQUFFLE9BQU9PLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGlDQUE0QyxPQUFYTCxZQUFXLE9BQUtLO1FBQy9ELE9BQU9MLFlBQVksa0NBQWtDO0lBQ3ZEO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ00sTUFBTU8scUJBQXFCLENBQUNDO0lBQy9CLElBQUksQ0FBQ0EsV0FBVyxDQUFDLGdCQUFnQlAsSUFBSSxDQUFDTyxVQUFVLE9BQU87SUFDdkQsTUFBTSxDQUFDQyxPQUFPQyxRQUFRLEdBQUdGLFFBQVFHLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUNDO0lBQ2hELE9BQU9KLFFBQVEsS0FBS0M7QUFDeEIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbGliL3RpbWUtdXRpbHMudHM/NGQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL3RpbWUtdXRpbHMudHNcblxuaW1wb3J0IHsgZm9ybWF0IGFzIGZvcm1hdEZucywgcGFyc2UgYXMgcGFyc2VGbnMgfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgeyBlcyB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZSc7IC8vIEltcG9ydCBTcGFuaXNoIGxvY2FsZSBpZiBuZWVkZWQgZm9yICdhbS9wbSdcblxuLyoqXG4gKiBGb3JtYXRzIGEgdGltZSBzdHJpbmcgKEhIOm1tKSBpbnRvIDEyLWhvdXIgZm9ybWF0IChoOm1tIGEpLlxuICogSGFuZGxlcyBpbnZhbGlkIGlucHV0IGdyYWNlZnVsbHkuXG4gKlxuICogQHBhcmFtIHRpbWVTdHJpbmcgLSBUaGUgdGltZSBzdHJpbmcgaW4gXCJISDptbVwiIGZvcm1hdC5cbiAqIEByZXR1cm5zIFRoZSBmb3JtYXR0ZWQgdGltZSBzdHJpbmcgKGUuZy4sIFwiODowMCBBTVwiKSBvciB0aGUgb3JpZ2luYWwgc3RyaW5nIGlmIGludmFsaWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUbzEySG91cih0aW1lU3RyaW5nOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBzdHJpbmcge1xuICBpZiAoIXRpbWVTdHJpbmcgfHwgIS9eXFxkezJ9OlxcZHsyfSQvLnRlc3QodGltZVN0cmluZykpIHtcbiAgICByZXR1cm4gdGltZVN0cmluZyB8fCAnJzsgLy8gUmV0dXJuIG9yaWdpbmFsIG9yIGVtcHR5IHN0cmluZyBpZiBpbnZhbGlkL3VuZGVmaW5lZFxuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBDcmVhdGUgYSBkdW1teSBkYXRlIG9iamVjdCB3aXRoIHRoZSB0aW1lIHRvIHVzZSBkYXRlLWZucyBmb3JtYXR0aW5nXG4gICAgY29uc3QgZHVtbXlEYXRlID0gcGFyc2VGbnModGltZVN0cmluZywgJ0hIOm1tJywgbmV3IERhdGUoKSk7XG4gICAgLy8gRm9ybWF0IHVzaW5nICdoOm1tIGEnIGZvciAxMi1ob3VyIGZvcm1hdCB3aXRoIEFNL1BNXG4gICAgLy8gVXNlIGxvY2FsZSAnZXMnIGlmIHlvdSB3YW50ICdhLiBtLicvJ3AuIG0uJyBpbnN0ZWFkIG9mIEFNL1BNXG4gICAgcmV0dXJuIGZvcm1hdEZucyhkdW1teURhdGUsICdoOm1tIGEnLCB7IGxvY2FsZTogZXMgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgZm9ybWF0dGluZyB0aW1lIHN0cmluZyBcIiR7dGltZVN0cmluZ31cIjpgLCBlcnJvcik7XG4gICAgcmV0dXJuIHRpbWVTdHJpbmc7IC8vIFJldHVybiBvcmlnaW5hbCBzdHJpbmcgb24gZXJyb3JcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlcyBhIHRpbWUgc3RyaW5nIChISDpNTSkgaW50byB0b3RhbCBtaW51dGVzIGZyb20gbWlkbmlnaHQuXG4gKiBAcGFyYW0gdGltZVN0ciAtIFRoZSB0aW1lIHN0cmluZyBpbiBcIkhIOm1tXCIgZm9ybWF0LlxuICogQHJldHVybnMgVGhlIHRvdGFsIG1pbnV0ZXMgZnJvbSBtaWRuaWdodCwgb3IgMCBpZiBpbnZhbGlkLlxuICovXG5leHBvcnQgY29uc3QgcGFyc2VUaW1lVG9NaW51dGVzID0gKHRpbWVTdHI6IHN0cmluZyB8IHVuZGVmaW5lZCk6IG51bWJlciA9PiB7XG4gICAgaWYgKCF0aW1lU3RyIHx8ICEvXlxcZHsyfTpcXGR7Mn0kLy50ZXN0KHRpbWVTdHIpKSByZXR1cm4gMDtcbiAgICBjb25zdCBbaG91cnMsIG1pbnV0ZXNdID0gdGltZVN0ci5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICAgIHJldHVybiBob3VycyAqIDYwICsgbWludXRlcztcbn07XG4iXSwibmFtZXMiOlsiZm9ybWF0IiwiZm9ybWF0Rm5zIiwicGFyc2UiLCJwYXJzZUZucyIsImVzIiwiZm9ybWF0VG8xMkhvdXIiLCJ0aW1lU3RyaW5nIiwidGVzdCIsImR1bW15RGF0ZSIsIkRhdGUiLCJsb2NhbGUiLCJlcnJvciIsImNvbnNvbGUiLCJwYXJzZVRpbWVUb01pbnV0ZXMiLCJ0aW1lU3RyIiwiaG91cnMiLCJtaW51dGVzIiwic3BsaXQiLCJtYXAiLCJOdW1iZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/time-utils.ts\n"));

/***/ })

});